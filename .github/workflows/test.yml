name: Run Tests

on:
  push:
    branches:
      - '*'  # Tous les branches
  pull_request:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  # Job 1: Tests Backend (Rust)
  test-backend:
    name: Test Backend (Rust)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: token4good_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libssl-dev pkg-config

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            token4good-backend/target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        working-directory: ./token4good-backend
        run: cargo fmt -- --check

      - name: Run Clippy
        working-directory: ./token4good-backend
        run: cargo clippy -- -D warnings

      - name: Run tests
        working-directory: ./token4good-backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/token4good_test
          RUST_LOG: debug
          JWT_SECRET: test_secret_key_for_ci
        run: |
          cargo test --verbose
          cargo test --doc

      - name: Check build
        working-directory: ./token4good-backend
        run: cargo build --release

  # Job 2: Tests Frontend (Next.js)
  test-frontend:
    name: Test Frontend (Next.js)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/dapp/package-lock.json

      - name: Install dependencies
        working-directory: ./apps/dapp
        run: npm ci

      - name: Run linter (ESLint)
        working-directory: ./apps/dapp
        run: npm run lint || true  # Continue m√™me si warnings

      - name: Run type checking
        working-directory: ./apps/dapp
        run: npx tsc --noEmit || true  # Type check sans compiler

      - name: Run tests (if configured)
        working-directory: ./apps/dapp
        run: |
          if grep -q "\"test\"" package.json; then
            npm test || echo "Tests not configured"
          else
            echo "No tests configured"
          fi

      - name: Build check
        working-directory: ./apps/dapp
        env:
          NEXT_PUBLIC_API_URL: https://t4g.dazno.de/api
          NEXT_PUBLIC_DAZNO_API_URL: https://api.dazno.de
          NEXT_PUBLIC_DAZNO_USERS_API_URL: https://dazno.de/api
        run: npm run build

  # Job 3: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rust Security Audit
        working-directory: ./token4good-backend
        run: |
          cargo install cargo-audit || true
          cargo audit || echo "Security audit completed with warnings"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Node.js Security Audit
        working-directory: ./apps/dapp
        run: |
          npm audit --audit-level=high || echo "Audit completed with warnings"

  # Job 4: Code Quality
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libssl-dev pkg-config

      - name: Check Rust code complexity
        working-directory: ./token4good-backend
        run: |
          # Count lines of code
          echo "üìä Backend Statistics:"
          find src -name "*.rs" | xargs wc -l | tail -1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check Frontend code complexity
        working-directory: ./apps/dapp
        run: |
          echo "üìä Frontend Statistics:"
          find . -name "*.tsx" -o -name "*.ts" | grep -v node_modules | xargs wc -l | tail -1

  # Job 5: Summary
  test-summary:
    name: Test Summary
    needs: [test-backend, test-frontend, security-audit, code-quality]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "üß™ Test Summary"
          echo "==============="
          echo ""
          
          if [ "${{ needs.test-backend.result }}" == "success" ]; then
            echo "‚úÖ Backend Tests: PASSED"
          else
            echo "‚ùå Backend Tests: FAILED"
          fi
          
          if [ "${{ needs.test-frontend.result }}" == "success" ]; then
            echo "‚úÖ Frontend Tests: PASSED"
          else
            echo "‚ùå Frontend Tests: FAILED"
          fi
          
          if [ "${{ needs.security-audit.result }}" == "success" ]; then
            echo "‚úÖ Security Audit: PASSED"
          else
            echo "‚ö†Ô∏è  Security Audit: WARNINGS"
          fi
          
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "‚úÖ Code Quality: PASSED"
          else
            echo "‚ö†Ô∏è  Code Quality: WARNINGS"
          fi
          
          echo ""
          
          if [ "${{ needs.test-backend.result }}" == "success" ] && [ "${{ needs.test-frontend.result }}" == "success" ]; then
            echo "üéâ All tests passed! Ready to deploy."
            exit 0
          else
            echo "‚ùå Some tests failed. Please fix before deploying."
            exit 1
          fi

