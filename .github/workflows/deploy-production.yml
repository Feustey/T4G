name: Deploy to Hostinger Production

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch: # Permet de d√©clencher manuellement

env:
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  # Job 1: Build Backend
  build-backend:
    name: Build Backend (Rust)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libssl-dev pkg-config

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            token4good-backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Backend
        working-directory: ./token4good-backend
        run: |
          cargo build --release
          strip target/release/token4good-backend || true

      - name: Upload Backend Binary
        uses: actions/upload-artifact@v3
        with:
          name: backend-binary
          path: token4good-backend/target/release/token4good-backend
          retention-days: 1

  # Job 2: Build Frontend
  build-frontend:
    name: Build Frontend (Next.js)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/dapp/package-lock.json

      - name: Create production env file
        working-directory: ./apps/dapp
        run: |
          cat > .env.production << EOF
          NEXT_PUBLIC_API_URL=https://t4g.dazno.de/api
          NEXT_PUBLIC_DAZNO_API_URL=https://api.dazno.de
          NEXT_PUBLIC_DAZNO_USERS_API_URL=https://dazno.de/api
          EOF

      - name: Install dependencies
        working-directory: ./apps/dapp
        run: npm ci

      - name: Build Frontend
        working-directory: ./apps/dapp
        run: npm run build

      - name: Create deployment package
        working-directory: ./apps/dapp
        run: |
          mkdir -p deployment-package
          cp -r .next deployment-package/
          cp -r public deployment-package/
          cp package.json deployment-package/
          cp package-lock.json deployment-package/
          cp next.config.js deployment-package/
          cp .env.production deployment-package/

      - name: Upload Frontend Build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: apps/dapp/deployment-package/
          retention-days: 1

  # Job 3: Deploy to Hostinger
  deploy:
    name: Deploy to Hostinger VPS
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://t4g.dazno.de
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Backend Binary
        uses: actions/download-artifact@v3
        with:
          name: backend-binary
          path: ./backend-binary

      - name: Download Frontend Build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend-build

      - name: Install SSH Client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client rsync

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup on server
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_HOST }}
          SSH_USER: ${{ secrets.HOSTINGER_USER }}
        run: |
          ssh $SSH_USER@$SSH_HOST << 'EOF'
            BACKUP_DIR="/var/www/token4good/backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            
            # Backup backend binary
            if [ -f /var/www/token4good/token4good-backend/token4good-backend ]; then
              cp /var/www/token4good/token4good-backend/token4good-backend $BACKUP_DIR/
              echo "‚úÖ Backend backup created"
            fi
            
            # Backup frontend
            if [ -d /var/www/token4good/frontend/.next ]; then
              cp -r /var/www/token4good/frontend/.next $BACKUP_DIR/
              echo "‚úÖ Frontend backup created"
            fi
            
            echo "üì¶ Backup location: $BACKUP_DIR"
            
            # Keep only last 5 backups
            cd /var/www/token4good/backups
            ls -t | tail -n +6 | xargs rm -rf 2>/dev/null || true
          EOF

      - name: Deploy Backend
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_HOST }}
          SSH_USER: ${{ secrets.HOSTINGER_USER }}
        run: |
          # Make binary executable
          chmod +x backend-binary/token4good-backend
          
          # Stop backend service
          ssh $SSH_USER@$SSH_HOST "systemctl stop token4good-backend || true"
          
          # Upload backend binary
          scp backend-binary/token4good-backend $SSH_USER@$SSH_HOST:/var/www/token4good/token4good-backend/
          
          # Start backend service
          ssh $SSH_USER@$SSH_HOST << 'EOF'
            systemctl start token4good-backend
            sleep 3
            
            # Check if backend is running
            if systemctl is-active --quiet token4good-backend; then
              echo "‚úÖ Backend deployed and running"
            else
              echo "‚ùå Backend failed to start"
              journalctl -u token4good-backend -n 50 --no-pager
              exit 1
            fi
          EOF

      - name: Deploy Frontend
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_HOST }}
          SSH_USER: ${{ secrets.HOSTINGER_USER }}
        run: |
          # Upload frontend files
          rsync -avz --delete \
            frontend-build/ \
            $SSH_USER@$SSH_HOST:/var/www/token4good/frontend/
          
          # Install dependencies and restart services
          ssh $SSH_USER@$SSH_HOST << 'EOF'
            cd /var/www/token4good/frontend
            
            # Install production dependencies
            npm install --production
            
            # Restart frontend service (if exists)
            if systemctl list-units --full -all | grep -Fq 'token4good-frontend.service'; then
              systemctl restart token4good-frontend
              echo "‚úÖ Frontend service restarted"
            else
              echo "‚ÑπÔ∏è  Frontend service not found (static deployment)"
            fi
            
            # Reload Nginx
            nginx -t && systemctl reload nginx
            echo "‚úÖ Nginx reloaded"
          EOF

      - name: Run Health Checks
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_HOST }}
          SSH_USER: ${{ secrets.HOSTINGER_USER }}
        run: |
          ssh $SSH_USER@$SSH_HOST << 'EOF'
            echo "üß™ Running health checks..."
            
            # Test Backend
            echo "Testing Backend (localhost:3001)..."
            if curl -f -s http://localhost:3001/health > /dev/null; then
              echo "‚úÖ Backend health check passed"
            else
              echo "‚ùå Backend health check failed"
              exit 1
            fi
            
            # Test Frontend (if service exists)
            if systemctl list-units --full -all | grep -Fq 'token4good-frontend.service'; then
              echo "Testing Frontend (localhost:3000)..."
              if curl -f -s http://localhost:3000 > /dev/null; then
                echo "‚úÖ Frontend health check passed"
              else
                echo "‚ö†Ô∏è  Frontend health check failed"
              fi
            fi
            
            echo "‚úÖ All health checks completed!"
          EOF

      - name: Test Public URLs
        run: |
          echo "üåê Testing public endpoints..."
          
          # Wait for services to stabilize
          sleep 5
          
          # Test Backend API
          echo "Testing Backend API Health..."
          curl -f https://t4g.dazno.de/health || (echo "‚ùå Backend API failed" && exit 1)
          
          # Test Frontend
          echo "Testing Frontend..."
          curl -I -f https://t4g.dazno.de/ || (echo "‚ùå Frontend failed" && exit 1)
          
          echo "‚úÖ Public endpoints are accessible!"

      - name: Display Service Status
        if: always()
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_HOST }}
          SSH_USER: ${{ secrets.HOSTINGER_USER }}
        run: |
          ssh $SSH_USER@$SSH_HOST << 'EOF'
            echo "üìä Service Status:"
            echo "===================="
            
            echo "Backend:"
            systemctl is-active token4good-backend && echo "‚úÖ Running" || echo "‚ùå Stopped"
            
            echo "Frontend:"
            systemctl is-active token4good-frontend 2>/dev/null && echo "‚úÖ Running" || echo "‚ÑπÔ∏è  Not configured"
            
            echo "Nginx:"
            systemctl is-active nginx && echo "‚úÖ Running" || echo "‚ùå Stopped"
            
            echo "PostgreSQL:"
            systemctl is-active postgresql && echo "‚úÖ Running" || echo "‚ùå Stopped"
          EOF

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "üéâ =================================="
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "üéâ =================================="
          echo ""
          echo "üåê Frontend: https://t4g.dazno.de"
          echo "üîß Backend API: https://t4g.dazno.de/api"
          echo "‚ù§Ô∏è  Health Check: https://t4g.dazno.de/health"
          echo ""
          echo "üì¶ Deployed at: $(date)"
          echo "üîñ Commit: ${{ github.sha }}"
          echo "üë§ Deployed by: ${{ github.actor }}"

      - name: Rollback on Failure
        if: failure()
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_HOST }}
          SSH_USER: ${{ secrets.HOSTINGER_USER }}
        run: |
          echo "‚ùå Deployment failed! Attempting rollback..."
          
          ssh $SSH_USER@$SSH_HOST << 'EOF'
            # Get latest backup
            LATEST_BACKUP=$(ls -t /var/www/token4good/backups | head -1)
            
            if [ -n "$LATEST_BACKUP" ]; then
              echo "üì¶ Rolling back to: $LATEST_BACKUP"
              
              # Restore backend
              if [ -f "/var/www/token4good/backups/$LATEST_BACKUP/token4good-backend" ]; then
                cp "/var/www/token4good/backups/$LATEST_BACKUP/token4good-backend" \
                   /var/www/token4good/token4good-backend/
                systemctl restart token4good-backend
                echo "‚úÖ Backend rolled back"
              fi
              
              # Restore frontend
              if [ -d "/var/www/token4good/backups/$LATEST_BACKUP/.next" ]; then
                rm -rf /var/www/token4good/frontend/.next
                cp -r "/var/www/token4good/backups/$LATEST_BACKUP/.next" \
                      /var/www/token4good/frontend/
                systemctl restart token4good-frontend 2>/dev/null || true
                systemctl reload nginx
                echo "‚úÖ Frontend rolled back"
              fi
              
              echo "‚úÖ Rollback completed"
            else
              echo "‚ö†Ô∏è  No backup found for rollback"
            fi
          EOF

  # Job 4: Smoke Tests (Post-Deployment)
  smoke-tests:
    name: Smoke Tests
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Test API Endpoints
        run: |
          echo "üß™ Running smoke tests..."
          
          # Test Backend Health
          echo "Testing Backend Health..."
          HEALTH=$(curl -f -s https://t4g.dazno.de/health)
          echo "‚úÖ Health: $HEALTH"
          
          # Test API Users endpoint
          echo "Testing API Users endpoint..."
          curl -I -f https://t4g.dazno.de/api/users
          echo "‚úÖ Users API accessible"
          
          # Test Frontend
          echo "Testing Frontend..."
          curl -I -f https://t4g.dazno.de/
          echo "‚úÖ Frontend accessible"
          
          echo ""
          echo "üéâ All smoke tests passed!"

