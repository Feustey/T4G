/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Forwarder, ForwarderInterface } from "../../contracts/Forwarder";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "forwarderAddress",
        type: "address",
      },
    ],
    name: "ForwarderCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "MetaTransactionExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Forwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getForwarderAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Forwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101406040523480156200001257600080fd5b506040518060400160405280601081526020017f4d696e696d616c466f72776172646572000000000000000000000000000000008152506040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000e88184846200017a60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050503073ffffffffffffffffffffffffffffffffffffffff167f6a1722b151fa6ee2129092224b7b96addf678f7981115ec5867d03fd820a415860405160405180910390a26200028e565b600083838346306040516020016200019795949392919062000231565b6040516020818303038152906040528051906020012090509392505050565b6000819050919050565b620001cb81620001b6565b82525050565b6000819050919050565b620001e681620001d1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021982620001ec565b9050919050565b6200022b816200020c565b82525050565b600060a082019050620002486000830188620001c0565b620002576020830187620001c0565b620002666040830186620001c0565b620002756060830185620001db565b62000284608083018462000220565b9695505050505050565b60805160a05160c05160e0516101005161012051611636620002de60003960006107ec0152600061082e0152600061080d0152600061074201526000610798015260006107c101526116366000f3fe60806040526004361061004a5760003560e01c806301ffc9a71461004f5780632d0335ab1461008c5780633441856f146100c957806347153f82146100f4578063bf5d3bdb14610125575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610bc0565b610162565b6040516100839190610c08565b60405180910390f35b34801561009857600080fd5b506100b360048036038101906100ae9190610c81565b6101bc565b6040516100c09190610cc7565b60405180910390f35b3480156100d557600080fd5b506100de610204565b6040516100eb9190610cf1565b60405180910390f35b61010e60048036038101906101099190610d95565b61020c565b60405161011c929190610ea1565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190610d95565b6104de565b6040516101599190610c08565b60405180910390f35b6000807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101b557506101b482610693565b5b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600030905090565b6000606061021b8585856104de565b61025a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025190610f54565b60405180910390fd5b6001856080013561026b9190610fa3565b6000808760000160208101906102819190610c81565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000808660200160208101906102d59190610c81565b73ffffffffffffffffffffffffffffffffffffffff1687606001358860400135898060a001906103059190610fe6565b8b60000160208101906103189190610c81565b60405160200161032a939291906110d0565b604051602081830303815290604052604051610346919061112b565b600060405180830381858888f193505050503d8060008114610384576040519150601f19603f3d011682016040523d82523d6000602084013e610389565b606091505b5091509150603f876060013561039f9190611171565b5a116103ae576103ad6111a2565b5b60001515821515036103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec90611243565b60405180910390fd5b8660200160208101906104089190610c81565b73ffffffffffffffffffffffffffffffffffffffff168760000160208101906104319190610c81565b73ffffffffffffffffffffffffffffffffffffffff167f03a8e3abe17734f998ec7aacc8db66f8ab07e8096a306018130db6d465f0da746000808b600001602081019061047e9190610c81565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516104c69190610cc7565b60405180910390a38181935093505050935093915050565b6000806105e784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506105d97fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e488860000160208101906105609190610c81565b8960200160208101906105739190610c81565b8a604001358b606001358c608001358d8060a001906105929190610fe6565b6040516105a0929190611263565b60405180910390206040516020016105be9796959493929190611295565b604051602081830303815290604052805190602001206106fd565b61071790919063ffffffff16565b905084608001356000808760000160208101906106049190610c81565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054148015610689575084600001602081019061065a9190610c81565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b9150509392505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600061071061070a61073e565b83610858565b9050919050565b6000806000610726858561088b565b91509150610733816108dc565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156107ba57507f000000000000000000000000000000000000000000000000000000000000000046145b156107e7577f00000000000000000000000000000000000000000000000000000000000000009050610855565b6108527f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610a42565b90505b90565b6000828260405160200161086d92919061137c565b60405160208183030381529060405280519060200120905092915050565b60008060418351036108cc5760008060006020860151925060408601519150606086015160001a90506108c087828585610a7c565b945094505050506108d5565b60006002915091505b9250929050565b600060048111156108f0576108ef6113b3565b5b816004811115610903576109026113b3565b5b0315610a3f576001600481111561091d5761091c6113b3565b5b8160048111156109305761092f6113b3565b5b03610970576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109679061142e565b60405180910390fd5b60026004811115610984576109836113b3565b5b816004811115610997576109966113b3565b5b036109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce9061149a565b60405180910390fd5b600360048111156109eb576109ea6113b3565b5b8160048111156109fe576109fd6113b3565b5b03610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a359061152c565b60405180910390fd5b5b50565b60008383834630604051602001610a5d95949392919061154c565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610ab7576000600391509150610b55565b600060018787878760405160008152602001604052604051610adc94939291906115bb565b6020604051602081039080840390855afa158015610afe573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b4c57600060019250925050610b55565b80600092509250505b94509492505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b9d81610b68565b8114610ba857600080fd5b50565b600081359050610bba81610b94565b92915050565b600060208284031215610bd657610bd5610b5e565b5b6000610be484828501610bab565b91505092915050565b60008115159050919050565b610c0281610bed565b82525050565b6000602082019050610c1d6000830184610bf9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4e82610c23565b9050919050565b610c5e81610c43565b8114610c6957600080fd5b50565b600081359050610c7b81610c55565b92915050565b600060208284031215610c9757610c96610b5e565b5b6000610ca584828501610c6c565b91505092915050565b6000819050919050565b610cc181610cae565b82525050565b6000602082019050610cdc6000830184610cb8565b92915050565b610ceb81610c43565b82525050565b6000602082019050610d066000830184610ce2565b92915050565b600080fd5b600060c08284031215610d2757610d26610d0c565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d5557610d54610d30565b5b8235905067ffffffffffffffff811115610d7257610d71610d35565b5b602083019150836001820283011115610d8e57610d8d610d3a565b5b9250929050565b600080600060408486031215610dae57610dad610b5e565b5b600084013567ffffffffffffffff811115610dcc57610dcb610b63565b5b610dd886828701610d11565b935050602084013567ffffffffffffffff811115610df957610df8610b63565b5b610e0586828701610d3f565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e4b578082015181840152602081019050610e30565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e7382610e11565b610e7d8185610e1c565b9350610e8d818560208601610e2d565b610e9681610e57565b840191505092915050565b6000604082019050610eb66000830185610bf9565b8181036020830152610ec88184610e68565b90509392505050565b600082825260208201905092915050565b7f4d696e696d616c466f727761726465723a207369676e617475726520646f657360008201527f206e6f74206d6174636820726571756573740000000000000000000000000000602082015250565b6000610f3e603283610ed1565b9150610f4982610ee2565b604082019050919050565b60006020820190508181036000830152610f6d81610f31565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fae82610cae565b9150610fb983610cae565b9250828201905080821115610fd157610fd0610f74565b5b92915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261100357611002610fd7565b5b80840192508235915067ffffffffffffffff82111561102557611024610fdc565b5b60208301925060018202360383131561104157611040610fe1565b5b509250929050565b600081905092915050565b82818337600083830152505050565b600061106f8385611049565b935061107c838584611054565b82840190509392505050565b60008160601b9050919050565b60006110a082611088565b9050919050565b60006110b282611095565b9050919050565b6110ca6110c582610c43565b6110a7565b82525050565b60006110dd828587611063565b91506110e982846110b9565b601482019150819050949350505050565b600061110582610e11565b61110f8185611049565b935061111f818560208601610e2d565b80840191505092915050565b600061113782846110fa565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061117c82610cae565b915061118783610cae565b92508261119757611196611142565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f466f727761726465723a204c6f77206c6576656c2063616c6c2072657665727460008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b600061122d602283610ed1565b9150611238826111d1565b604082019050919050565b6000602082019050818103600083015261125c81611220565b9050919050565b6000611270828486611063565b91508190509392505050565b6000819050919050565b61128f8161127c565b82525050565b600060e0820190506112aa600083018a611286565b6112b76020830189610ce2565b6112c46040830188610ce2565b6112d16060830187610cb8565b6112de6080830186610cb8565b6112eb60a0830185610cb8565b6112f860c0830184611286565b98975050505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000611345600283611304565b91506113508261130f565b600282019050919050565b6000819050919050565b6113766113718261127c565b61135b565b82525050565b600061138782611338565b91506113938285611365565b6020820191506113a38284611365565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611418601883610ed1565b9150611423826113e2565b602082019050919050565b600060208201905081810360008301526114478161140b565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611484601f83610ed1565b915061148f8261144e565b602082019050919050565b600060208201905081810360008301526114b381611477565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611516602283610ed1565b9150611521826114ba565b604082019050919050565b6000602082019050818103600083015261154581611509565b9050919050565b600060a0820190506115616000830188611286565b61156e6020830187611286565b61157b6040830186611286565b6115886060830185610cb8565b6115956080830184610ce2565b9695505050505050565b600060ff82169050919050565b6115b58161159f565b82525050565b60006080820190506115d06000830187611286565b6115dd60208301866115ac565b6115ea6040830185611286565b6115f76060830184611286565b9594505050505056fea26469706673582212203f84e353612b2ba21b83ddda829c2dfe68d6ccde8dc7a0782c9d28c61111e56064736f6c63430008110033";

type ForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Forwarder__factory extends ContractFactory {
  constructor(...args: ForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  override connect(signer: Signer): Forwarder__factory {
    return super.connect(signer) as Forwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForwarderInterface {
    return new utils.Interface(_abi) as ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}
