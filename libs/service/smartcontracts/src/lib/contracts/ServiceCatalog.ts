/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ServiceCatalog {
  export type DealStruct = {
    dealId: PromiseOrValue<BigNumberish>;
    serviceId: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    cancelled: PromiseOrValue<boolean>;
    validated: PromiseOrValue<boolean>;
  };

  export type DealStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean,
    boolean
  ] & {
    dealId: BigNumber;
    serviceId: BigNumber;
    buyer: string;
    price: BigNumber;
    cancelled: boolean;
    validated: boolean;
  };

  export type ServiceStruct = {
    serviceId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    provider: PromiseOrValue<string>;
    buyerRole: PromiseOrValue<BytesLike>;
    price: PromiseOrValue<BigNumberish>;
    supply: PromiseOrValue<BigNumberish>;
    enabled: PromiseOrValue<boolean>;
    buyerCanCancel: PromiseOrValue<boolean>;
    providerCanCancel: PromiseOrValue<boolean>;
    buyerCanValidate: PromiseOrValue<boolean>;
    providerCanValidate: PromiseOrValue<boolean>;
  };

  export type ServiceStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    serviceId: BigNumber;
    name: string;
    provider: string;
    buyerRole: string;
    price: BigNumber;
    supply: BigNumber;
    enabled: boolean;
    buyerCanCancel: boolean;
    providerCanCancel: boolean;
    buyerCanValidate: boolean;
    providerCanValidate: boolean;
  };
}

export interface ServiceCatalogInterface extends utils.Interface {
  functions: {
    "ALUMNI_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "RELAYER_ROLE()": FunctionFragment;
    "SERVICE_CREATOR_ROLE()": FunctionFragment;
    "SERVICE_PROVIDER_ROLE()": FunctionFragment;
    "STUDENT_ROLE()": FunctionFragment;
    "buyService(uint256)": FunctionFragment;
    "cancelDealAsBuyer(uint256)": FunctionFragment;
    "cancelDealAsProvider(uint256)": FunctionFragment;
    "createService(string,address,bytes32,uint256,uint256,bool,bool,bool,bool,bool)": FunctionFragment;
    "dealIds()": FunctionFragment;
    "deals(uint256)": FunctionFragment;
    "disableService(uint256)": FunctionFragment;
    "enableService(uint256)": FunctionFragment;
    "getDeal(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getService(uint256)": FunctionFragment;
    "getTokenAddress()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "pauseContract()": FunctionFragment;
    "paused()": FunctionFragment;
    "redeemWelcomeBonus(address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "serviceIds()": FunctionFragment;
    "services(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unPauseContract()": FunctionFragment;
    "updateDeal(uint256)": FunctionFragment;
    "updateService(uint256,uint256,uint256)": FunctionFragment;
    "updateServiceProvider(uint256,address)": FunctionFragment;
    "validateDealAsBuyer(uint256)": FunctionFragment;
    "validateDealAsProvider(uint256)": FunctionFragment;
    "welcomeBonusReceived(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ALUMNI_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "RELAYER_ROLE"
      | "SERVICE_CREATOR_ROLE"
      | "SERVICE_PROVIDER_ROLE"
      | "STUDENT_ROLE"
      | "buyService"
      | "cancelDealAsBuyer"
      | "cancelDealAsProvider"
      | "createService"
      | "dealIds"
      | "deals"
      | "disableService"
      | "enableService"
      | "getDeal"
      | "getRoleAdmin"
      | "getService"
      | "getTokenAddress"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isTrustedForwarder"
      | "pauseContract"
      | "paused"
      | "redeemWelcomeBonus"
      | "renounceRole"
      | "revokeRole"
      | "serviceIds"
      | "services"
      | "supportsInterface"
      | "unPauseContract"
      | "updateDeal"
      | "updateService"
      | "updateServiceProvider"
      | "validateDealAsBuyer"
      | "validateDealAsProvider"
      | "welcomeBonusReceived"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ALUMNI_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SERVICE_CREATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SERVICE_PROVIDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STUDENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyService",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDealAsBuyer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDealAsProvider",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createService",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "dealIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableService",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableService",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getService",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemWelcomeBonus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "services",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unPauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateService",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateServiceProvider",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDealAsBuyer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDealAsProvider",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "welcomeBonusReceived",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ALUMNI_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SERVICE_CREATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SERVICE_PROVIDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STUDENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelDealAsBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDealAsProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dealIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemWelcomeBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "serviceIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "services", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unPauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateServiceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDealAsBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDealAsProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "welcomeBonusReceived",
    data: BytesLike
  ): Result;

  events: {
    "DealCancelled(uint256,uint256,address,address,bool,bool)": EventFragment;
    "DealCreated(uint256,uint256,address,address,uint256,bool,bool)": EventFragment;
    "DealUpdated(uint256)": EventFragment;
    "DealValidated(uint256,uint256,address,address,bool,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "ServiceCreated(uint256,string,address,uint256,uint256,bool,bool,bool,bool,bool)": EventFragment;
    "ServiceProviderUpdated(uint256,address)": EventFragment;
    "ServiceUpdated(uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WelcomeBonusReceived(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DealCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceProviderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WelcomeBonusReceived"): EventFragment;
}

export interface DealCancelledEventObject {
  dealId: BigNumber;
  serviceId: BigNumber;
  buyer: string;
  provider: string;
  cancelled: boolean;
  validated: boolean;
}
export type DealCancelledEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, boolean, boolean],
  DealCancelledEventObject
>;

export type DealCancelledEventFilter = TypedEventFilter<DealCancelledEvent>;

export interface DealCreatedEventObject {
  dealId: BigNumber;
  serviceId: BigNumber;
  buyer: string;
  provider: string;
  price: BigNumber;
  cancelled: boolean;
  validated: boolean;
}
export type DealCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber, boolean, boolean],
  DealCreatedEventObject
>;

export type DealCreatedEventFilter = TypedEventFilter<DealCreatedEvent>;

export interface DealUpdatedEventObject {
  dealId: BigNumber;
}
export type DealUpdatedEvent = TypedEvent<[BigNumber], DealUpdatedEventObject>;

export type DealUpdatedEventFilter = TypedEventFilter<DealUpdatedEvent>;

export interface DealValidatedEventObject {
  dealId: BigNumber;
  serviceId: BigNumber;
  buyer: string;
  provider: string;
  cancelled: boolean;
  validated: boolean;
}
export type DealValidatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, boolean, boolean],
  DealValidatedEventObject
>;

export type DealValidatedEventFilter = TypedEventFilter<DealValidatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface ServiceCreatedEventObject {
  serviceId: BigNumber;
  name: string;
  provider: string;
  price: BigNumber;
  supply: BigNumber;
  enabled: boolean;
  buyerCanCancel: boolean;
  providerCanCancel: boolean;
  buyerCanValidate: boolean;
  providerCanValidate: boolean;
}
export type ServiceCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ],
  ServiceCreatedEventObject
>;

export type ServiceCreatedEventFilter = TypedEventFilter<ServiceCreatedEvent>;

export interface ServiceProviderUpdatedEventObject {
  serviceId: BigNumber;
  provider: string;
}
export type ServiceProviderUpdatedEvent = TypedEvent<
  [BigNumber, string],
  ServiceProviderUpdatedEventObject
>;

export type ServiceProviderUpdatedEventFilter =
  TypedEventFilter<ServiceProviderUpdatedEvent>;

export interface ServiceUpdatedEventObject {
  serviceId: BigNumber;
  price: BigNumber;
  supply: BigNumber;
}
export type ServiceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ServiceUpdatedEventObject
>;

export type ServiceUpdatedEventFilter = TypedEventFilter<ServiceUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WelcomeBonusReceivedEventObject {
  user: string;
  amount: BigNumber;
}
export type WelcomeBonusReceivedEvent = TypedEvent<
  [string, BigNumber],
  WelcomeBonusReceivedEventObject
>;

export type WelcomeBonusReceivedEventFilter =
  TypedEventFilter<WelcomeBonusReceivedEvent>;

export interface ServiceCatalog extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ServiceCatalogInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ALUMNI_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SERVICE_CREATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SERVICE_PROVIDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    STUDENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    buyService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelDealAsBuyer(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelDealAsProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createService(
      name: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      buyerRole: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      supply: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      buyerCanCancel: PromiseOrValue<boolean>,
      providerCanCancel: PromiseOrValue<boolean>,
      buyerCanValidate: PromiseOrValue<boolean>,
      providerCanValidate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
        dealId: BigNumber;
        serviceId: BigNumber;
        buyer: string;
        price: BigNumber;
        cancelled: boolean;
        validated: boolean;
      }
    >;

    disableService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ServiceCatalog.DealStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ServiceCatalog.ServiceStructOutput]>;

    getTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admin: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    redeemWelcomeBonus(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    serviceIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    services(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        serviceId: BigNumber;
        name: string;
        provider: string;
        buyerRole: string;
        price: BigNumber;
        supply: BigNumber;
        enabled: boolean;
        buyerCanCancel: boolean;
        providerCanCancel: boolean;
        buyerCanValidate: boolean;
        providerCanValidate: boolean;
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unPauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateService(
      serviceId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      supply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateServiceProvider(
      serviceId: PromiseOrValue<BigNumberish>,
      serviceProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateDealAsBuyer(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateDealAsProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    welcomeBonusReceived(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ALUMNI_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

  SERVICE_CREATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  SERVICE_PROVIDER_ROLE(overrides?: CallOverrides): Promise<string>;

  STUDENT_ROLE(overrides?: CallOverrides): Promise<string>;

  buyService(
    serviceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelDealAsBuyer(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelDealAsProvider(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createService(
    name: PromiseOrValue<string>,
    provider: PromiseOrValue<string>,
    buyerRole: PromiseOrValue<BytesLike>,
    price: PromiseOrValue<BigNumberish>,
    supply: PromiseOrValue<BigNumberish>,
    enabled: PromiseOrValue<boolean>,
    buyerCanCancel: PromiseOrValue<boolean>,
    providerCanCancel: PromiseOrValue<boolean>,
    buyerCanValidate: PromiseOrValue<boolean>,
    providerCanValidate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealIds(overrides?: CallOverrides): Promise<BigNumber>;

  deals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
      dealId: BigNumber;
      serviceId: BigNumber;
      buyer: string;
      price: BigNumber;
      cancelled: boolean;
      validated: boolean;
    }
  >;

  disableService(
    serviceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableService(
    serviceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDeal(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ServiceCatalog.DealStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getService(
    serviceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ServiceCatalog.ServiceStructOutput>;

  getTokenAddress(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admin: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pauseContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  redeemWelcomeBonus(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  serviceIds(overrides?: CallOverrides): Promise<BigNumber>;

  services(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ] & {
      serviceId: BigNumber;
      name: string;
      provider: string;
      buyerRole: string;
      price: BigNumber;
      supply: BigNumber;
      enabled: boolean;
      buyerCanCancel: boolean;
      providerCanCancel: boolean;
      buyerCanValidate: boolean;
      providerCanValidate: boolean;
    }
  >;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unPauseContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDeal(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateService(
    serviceId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateServiceProvider(
    serviceId: PromiseOrValue<BigNumberish>,
    serviceProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateDealAsBuyer(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateDealAsProvider(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  welcomeBonusReceived(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ALUMNI_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

    SERVICE_CREATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    SERVICE_PROVIDER_ROLE(overrides?: CallOverrides): Promise<string>;

    STUDENT_ROLE(overrides?: CallOverrides): Promise<string>;

    buyService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelDealAsBuyer(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelDealAsProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createService(
      name: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      buyerRole: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      supply: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      buyerCanCancel: PromiseOrValue<boolean>,
      providerCanCancel: PromiseOrValue<boolean>,
      buyerCanValidate: PromiseOrValue<boolean>,
      providerCanValidate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dealIds(overrides?: CallOverrides): Promise<BigNumber>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
        dealId: BigNumber;
        serviceId: BigNumber;
        buyer: string;
        price: BigNumber;
        cancelled: boolean;
        validated: boolean;
      }
    >;

    disableService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ServiceCatalog.DealStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ServiceCatalog.ServiceStructOutput>;

    getTokenAddress(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      admin: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pauseContract(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    redeemWelcomeBonus(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    serviceIds(overrides?: CallOverrides): Promise<BigNumber>;

    services(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        serviceId: BigNumber;
        name: string;
        provider: string;
        buyerRole: string;
        price: BigNumber;
        supply: BigNumber;
        enabled: boolean;
        buyerCanCancel: boolean;
        providerCanCancel: boolean;
        buyerCanValidate: boolean;
        providerCanValidate: boolean;
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unPauseContract(overrides?: CallOverrides): Promise<void>;

    updateDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateService(
      serviceId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      supply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateServiceProvider(
      serviceId: PromiseOrValue<BigNumberish>,
      serviceProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateDealAsBuyer(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateDealAsProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    welcomeBonusReceived(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DealCancelled(uint256,uint256,address,address,bool,bool)"(
      dealId?: PromiseOrValue<BigNumberish> | null,
      serviceId?: null,
      buyer?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null,
      cancelled?: null,
      validated?: null
    ): DealCancelledEventFilter;
    DealCancelled(
      dealId?: PromiseOrValue<BigNumberish> | null,
      serviceId?: null,
      buyer?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null,
      cancelled?: null,
      validated?: null
    ): DealCancelledEventFilter;

    "DealCreated(uint256,uint256,address,address,uint256,bool,bool)"(
      dealId?: PromiseOrValue<BigNumberish> | null,
      serviceId?: null,
      buyer?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null,
      price?: null,
      cancelled?: null,
      validated?: null
    ): DealCreatedEventFilter;
    DealCreated(
      dealId?: PromiseOrValue<BigNumberish> | null,
      serviceId?: null,
      buyer?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null,
      price?: null,
      cancelled?: null,
      validated?: null
    ): DealCreatedEventFilter;

    "DealUpdated(uint256)"(
      dealId?: PromiseOrValue<BigNumberish> | null
    ): DealUpdatedEventFilter;
    DealUpdated(
      dealId?: PromiseOrValue<BigNumberish> | null
    ): DealUpdatedEventFilter;

    "DealValidated(uint256,uint256,address,address,bool,bool)"(
      dealId?: PromiseOrValue<BigNumberish> | null,
      serviceId?: null,
      buyer?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null,
      cancelled?: null,
      validated?: null
    ): DealValidatedEventFilter;
    DealValidated(
      dealId?: PromiseOrValue<BigNumberish> | null,
      serviceId?: null,
      buyer?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null,
      cancelled?: null,
      validated?: null
    ): DealValidatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "ServiceCreated(uint256,string,address,uint256,uint256,bool,bool,bool,bool,bool)"(
      serviceId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      provider?: PromiseOrValue<string> | null,
      price?: null,
      supply?: null,
      enabled?: null,
      buyerCanCancel?: null,
      providerCanCancel?: null,
      buyerCanValidate?: null,
      providerCanValidate?: null
    ): ServiceCreatedEventFilter;
    ServiceCreated(
      serviceId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      provider?: PromiseOrValue<string> | null,
      price?: null,
      supply?: null,
      enabled?: null,
      buyerCanCancel?: null,
      providerCanCancel?: null,
      buyerCanValidate?: null,
      providerCanValidate?: null
    ): ServiceCreatedEventFilter;

    "ServiceProviderUpdated(uint256,address)"(
      serviceId?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null
    ): ServiceProviderUpdatedEventFilter;
    ServiceProviderUpdated(
      serviceId?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null
    ): ServiceProviderUpdatedEventFilter;

    "ServiceUpdated(uint256,uint256,uint256)"(
      serviceId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      supply?: null
    ): ServiceUpdatedEventFilter;
    ServiceUpdated(
      serviceId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      supply?: null
    ): ServiceUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WelcomeBonusReceived(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WelcomeBonusReceivedEventFilter;
    WelcomeBonusReceived(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WelcomeBonusReceivedEventFilter;
  };

  estimateGas: {
    ALUMNI_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SERVICE_CREATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SERVICE_PROVIDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    STUDENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    buyService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelDealAsBuyer(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelDealAsProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createService(
      name: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      buyerRole: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      supply: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      buyerCanCancel: PromiseOrValue<boolean>,
      providerCanCancel: PromiseOrValue<boolean>,
      buyerCanValidate: PromiseOrValue<boolean>,
      providerCanValidate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealIds(overrides?: CallOverrides): Promise<BigNumber>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    redeemWelcomeBonus(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    serviceIds(overrides?: CallOverrides): Promise<BigNumber>;

    services(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unPauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateService(
      serviceId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      supply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateServiceProvider(
      serviceId: PromiseOrValue<BigNumberish>,
      serviceProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateDealAsBuyer(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateDealAsProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    welcomeBonusReceived(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ALUMNI_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SERVICE_CREATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SERVICE_PROVIDER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STUDENT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelDealAsBuyer(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelDealAsProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createService(
      name: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      buyerRole: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      supply: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      buyerCanCancel: PromiseOrValue<boolean>,
      providerCanCancel: PromiseOrValue<boolean>,
      buyerCanValidate: PromiseOrValue<boolean>,
      providerCanValidate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getService(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemWelcomeBonus(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    serviceIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    services(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unPauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateService(
      serviceId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      supply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateServiceProvider(
      serviceId: PromiseOrValue<BigNumberish>,
      serviceProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateDealAsBuyer(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateDealAsProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    welcomeBonusReceived(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
