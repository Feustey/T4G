---
globs: token4good-backend/tests/**/*.rs,apps/dapp/__tests__/**/*.ts
description: Standards de tests pour Token4Good v2
---

# Testing Standards - Token4Good v2

## Coverage Actuel
- Backend Rust : **15/15 tests unitaires** ✅ (100% pass)
- Backend Rust : **17 tests intégration** (9 run, 8 ignorés)
- Coverage : **85%** sur services critiques

## Backend Rust Tests

### Tests Unitaires
Localisation : Fichiers `*.rs` avec `#[cfg(test)]`

```rust
#[cfg(test)]
mod tests {
    use super::*;
    
    #[tokio::test]
    async fn test_create_proof_contract() {
        let service = RgbNativeService::new("./test_data".to_string());
        let result = service.create_proof_contract(...).await;
        assert!(result.is_ok());
    }
}
```

### Tests d'Intégration
Localisation : [token4good-backend/tests/](mdc:token4good-backend/tests/)

```rust
// tests/integration_tests.rs
#[tokio::test]
async fn test_full_mentoring_workflow() {
    // Test end-to-end du flux mentoring
}

#[tokio::test]
#[ignore = "Requires running server"]
async fn test_api_endpoint() {
    // Test avec serveur actif
}
```

### Commandes
```bash
# Tests unitaires
cargo test --lib

# Tests d'intégration (sans serveur)
cargo test --test integration_tests

# Tests d'intégration (avec serveur)
cargo test --test integration_tests -- --ignored
```

## Frontend Tests

### Tests E2E (À implémenter)
Localisation : [apps/dapp/__tests__/](mdc:apps/dapp/__tests__/)

```typescript
// migration.test.ts
describe('API Migration Tests', () => {
  it('should authenticate with backend JWT', async () => {
    const response = await apiClient.login({
      email: 'test@example.com',
      password: 'test123',
    });
    expect(response.token).toBeDefined();
  });

  it('should create mentoring request', async () => {
    const request = await apiClient.createMentoringRequest({
      title: 'Test Request',
      description: 'Test Description',
      mentee_id: 'user123',
    });
    expect(request.id).toBeDefined();
  });
});
```

### Commandes
```bash
# Tests unitaires
npm run test

# Tests E2E
npm run test:e2e
```

## Flux Critiques à Tester

### 1. Authentication Flow
- [ ] Login avec JWT
- [ ] Refresh token
- [ ] Logout
- [ ] OAuth callbacks

### 2. Mentoring Flow
- [ ] Créer demande mentoring
- [ ] Assigner mentor
- [ ] Compléter session
- [ ] Créer preuve RGB

### 3. Payment Flow
- [ ] Créer invoice Lightning
- [ ] Payer invoice
- [ ] Vérifier statut paiement
- [ ] Transférer preuve RGB

### 4. Admin Flow
- [ ] Liste utilisateurs
- [ ] Gestion wallets
- [ ] Métriques système
- [ ] Modération services

## Performance Testing
```bash
# Load test avec k6 ou wrk
wrk -t12 -c400 -d30s http://localhost:8080/api/proofs
```

**Target :**
- 100 utilisateurs concurrents
- <10ms p50 latence
- <50ms p95 latence

## CI/CD
- Tests automatiques sur chaque commit
- Blocage merge si tests fail
- Coverage report sur PRs

## Documentation
- Progression : [PROGRESS_REPORT.md](mdc:PROGRESS_REPORT.md)
- Tests résultats : [TEST-RESULTS.md](mdc:TEST-RESULTS.md)
